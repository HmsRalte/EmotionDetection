Deploying a trained machine learning model as a web service can be done using a web framework like Flask or Django in Python. Here's a simple example using Flask:

1. Install Flask: You can install Flask using pip:


pip install flask


2. Create a Flask app: Create a new Python file (e.g., `app.py`) and set up a basic Flask app:

from flask import Flask, request, jsonify
from keras.models import load_model

app = Flask(__name__)

# Load the model
model = load_model('my_model.keras')

@app.route('/predict', methods=['POST'])
def predict():
    data = request.get_json(force=True)  # Get the JSON data from the request
    prediction = model.predict([data])   # Make a prediction using the model
    return jsonify(prediction.tolist())  # Return the prediction as JSON

if __name__ == '__main__':
    app.run(port=5000, debug=True)


This code creates a new Flask app with a single route (`/predict`) that accepts POST requests. When a POST request is received, the app gets the JSON data from the request, uses the model to make a prediction, and then returns the prediction as JSON.

3. Run the Flask app: You can run the Flask app using the command:

python app.py


This will start a web server on your machine at `http://localhost:5000`. You can make POST requests to `http://localhost:5000/predict` to get predictions from your model.

4. Deploy the Flask app: To make your web service available on the internet, you can deploy your Flask app to a cloud platform like AWS, Google Cloud, or Heroku. The process for this depends on the platform you choose.

Remember to secure your web service by validating and sanitizing inputs, handling errors properly, and using HTTPS for communication.